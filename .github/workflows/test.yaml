name: my_security_gate

on:
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
  #schedule:
  #  - cron: '20 3 * * 2'
  workflow_dispatch:
  
jobs:
  codeql-scan:
    permissions:
      actions: read
      contents: read
      security-events: write    
    uses: bruce-wh-li/startup-sample-project-aws-containers/.github/workflows/codeql.yaml@main

  sonar-repo-scan:
    permissions:
      actions: read
      contents: read
      security-events: write    
    uses: oykotbruce/wordsmith/.github/workflows/sonar-scanner.yaml@main
    with:
      ORG: bli-sonar-org
      PROJECT_KEY: security_day
      URL: https://sonarcloud.io
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #build-push-web:
  #  uses: oykotbruce/wordsmith/.github/workflows/call-docker-build-web.yaml@main
  #  with:
  #    IMAGE_REGISTRY: docker.io
  #    IMAGE: dockersamples/wordsmith-web
  #    WORKDIR: ./web
  #  secrets:
  #    IMAGE_REGISTRY_USER: ${{ secrets.IMAGE_REGISTRY_USER }}
  #    IMAGE_REGISTRY_PASSWORD: ${{ secrets.IMAGE_REGISTRY_PASSWORD }}
      
  #build-push-api:
  #  uses: oykotbruce/wordsmith/.github/workflows/call-docker-build-api.yaml@main
  #  with:
  #    IMAGE_REGISTRY: docker.io
  #    IMAGE: dockersamples/wordsmith-api
  #    WORKDIR: ./api
  #  secrets:
  #    IMAGE_REGISTRY_USER: ${{ secrets.IMAGE_REGISTRY_USER }}
  #    IMAGE_REGISTRY_PASSWORD: ${{ secrets.IMAGE_REGISTRY_PASSWORD }}


  trivy-image-scan:  #docker image scan
    uses: bruce-wh-li/startup-sample-project-aws-containers/.github/workflows/trivy-container.yaml@main
    with:
      IMAGE: brucecruise/bcgov-nginx-demo
      TAG: latest
     
  trivy-image-scan2:  #docker image scan         
    name: Trivy Image scan
    permissions: write-all
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: brucecruise/bcgov-nginx-demo:latest
          #format: table
          format: 'sarif'
          output: 'trivy-vuln-results.sarif'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: os,library
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-vuln-results.sarif'
    
  
  trivy-iac-scan:
    name: Trivy IaC scan
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner in IaC mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config' # iac mode
          hide-progress: false
          format: 'sarif'
          output: 'trivy-iac-results.sarif'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-iac-results.sarif'

  trivy-repo-scan:
      name: Trivy Repo scan
      permissions: write-all
      runs-on: ubuntu-latest
      steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'     # github repo
          ignore-unfixed: true
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-repo-results.sarif'
          exit_code: '1'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-repo-results.sarif'

#  owasp-scan:
#    uses: bruce-wh-li/startup-sample-project-aws-containers/.github/workflows/owasp-scan.yaml@main
#    with:
#      ZAP_SCAN_TYPE: 'full' # Accepted values are base and full.
#      ZAP_TARGET_URL: https://dwv62mzgp1214.cloudfront.net/
#      ZAP_DURATION: '2'
#      ZAP_MAX_DURATION: '5'
#      ZAP_GCP_PUBLISH: false
      #ZAP_GCP_PROJECT: phronesis-310405  # Only required if ZAP_GCP_PUBLISH is TRUE
      #ZAP_GCP_BUCKET: 'zap-scan-results' # Only required if ZAP_GCP_PUBLISH is TRUE
    #secrets:
    #  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }} # Only required if ZAP_GCP_PUBLISH is TRUE

  checkov-scan:  
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
    - name: checkout
      uses: actions/checkout@v2

    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
# for details, refers to https://github.com/bridgecrewio/checkov-action

    - name: test_checkov_scan
    #- name: Test with Checkov
    #  id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: /
#Skip all checks that are MEDIUM severity or lower, 
#as well as check CKV_789 (assume this is a high severity check):
        skip-check: MEDIUM,CKV_789 
        framework: terraform  #cloudformation,terraform,kubernetes
        output_format: sarif # optional: the output format, one of: cli, json, junitxml, github_failed_only, or sarif. Default: sarif
        output_file_path: chekov-results.sarif # folder and name of results file
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'chekov-results.sarif'
 
  rocketchat-workflow-failed-status: 
    name: Post workflow failed status to RC  
    if: failure()
    runs-on: ubuntu-latest
    needs:  
      - trivy-image-scan2  
      - checkov-scan  
      - codeql-scan   
      - trivy-iac-scan  
      - trivy-repo-scan  
    steps:
      - name: Rocket.Chat Notification
        uses: RocketChat/Rocket.Chat.GitHub.Action.Notification@master       
        # trivy-image-scan.failure() |checkov-scan.failure() |
        #      codeql-scan.failure() | trivy-iac-scan.failure() | trivy-repo-scan.failure() |
        #      trivy-ecr-scan.failure() | ecr-scan.failure()}}
        with:
          type: ${{ job.status }}
          job_name: '*more than 1 Application Security Check(s) Job Failed*'
          mention: 'here'
          mention_if: 'failure'
          channel: '#bruce-testing'
          url: ${{ secrets.ROCKETCHAT_WEBHOOK }}
          commit: true
          token: ${{ secrets.GITHUB_TOKEN }}
          exit_code: '1'

  rocketchat-workflow-successful-status: 
    name: Post workflow successful status to RC  
    needs:  
      - trivy-image-scan2  
      - checkov-scan  
      - codeql-scan   
      - trivy-iac-scan  
      - trivy-repo-scan  
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Rocket.Chat Notification
        uses: RocketChat/Rocket.Chat.GitHub.Action.Notification@master
        #if: always()
        with:
          type: ${{ job.status }}
          job_name: '*All Application Security Check Passed*'
          mention: 'here'
          mention_if: 'failure'
          channel: '#bruce-testing'
          url: ${{ secrets.ROCKETCHAT_WEBHOOK }}
          commit: true
          token: ${{ secrets.GITHUB_TOKEN }}
